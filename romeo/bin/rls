#!/usr/bin/python
###############################################################################
#   Copyright 2011 Orbitz Worldwide
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
###############################################################################

import os
import re
import sys

os.environ.update({'ROMEO_IGNORE_FQDN': "1"})
DEBUG = False #global debug

#output formatters
try: import simplejson as json
except ImportError:
    try: import json
    except: json = None
try: import cPickle as pickle
except ImportError:
    import pickle
from yaml import dump as yaml_dumper
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

from twisted.web.resource import Resource
from twisted.python import failure, usage, util

internal_seperator = '/'
RLS_VERSION = '0.9.0'

def resource_error(func):
    """decorator the get child messages to indicate errors"""
    def decorator(*args, **kwargs):
        try: return func(*args, **kwargs)
        except:
            f = failure.Failure()
            msg = f.value.__class__.__name__
            msg += ': ' + f.getErrorMessage()
            sys.stderr.write(msg+'\n')
            global DEBUG
            if DEBUG:
                sys.stderr.write(f.getTraceback())
                sys.stderr.write('\n')
            sys.stderr.flush()
            raise sys.exit(1)
    return decorator


def make_dict(romeo_key_value):
    """Converts a RomeoKeyValue object to a dictionary.

       @param romeo_key_value L{romeo.foundation.RomeoKeyValue}
       @raises L{exceptions.TypeError} on invalid input
       @return C{dict}
    """
    import romeo
    if isinstance(romeo_key_value, dict): return romeo_key_value
    if not isinstance(romeo_key_value, romeo.foundation.RomeoKeyValue):
        raise TypeError('%s is not a RomeoKeyValue' % str(romeo_key_value))
    return {romeo_key_value.KEY: romeo_key_value.VALUE}


class _ConfigResource(Resource, object):
    """Resource to provide serializers and convenient child resource lookup"""
    def __init__(self):
        Resource.__init__(self)
        if not hasattr(self, 'OUTPUT_DATA'):
            OUTPUT_DATA = None

    def json_serialize(self, data):
        """Take a python object and return the json serialized representation.

           @param data C{object}
           @return C{str}
        """
        return json.dumps(data)

    def pickle_serialize(self, data):
        """Take a python object and return the pickle serialized representation.

           @param data C{object}
           @return C{str}
        """
        return pickle.dumps(data)

    def yaml_serialize(self, data):
        """Take a python object and return the yaml serialized representation.

           @param data C{object}
           @return C{str}
        """
        return yaml_dumper(data, Dumper=Dumper, default_flow_style=False)

    def value_serialize(self, data, request):
        """Take a python object and extract the values and apply a delimitter.

           @param data C{object}
           @return C{str}
        """
        def default_pack(d):
            if isinstance(d, (str,int,float,bool)):
                return str(d)
        output = []
        delimiter = request.args.get('delimiter', ['\n'])[0]
        if 'pickle' in request.args.get('format', []):
            func = self.pickle_serialize
        elif 'yaml' in request.args.get('format', []):
            func = self.yaml_serialize
        elif 'json' in request.args.get('format', []):
            func = self.json_serialize
        else: func = default_pack
        #if this is a dictionary it is an early item in the tree
        if isinstance(data, dict):
            for o in data.values():
                value = func(o)
                if not value:
                    output += o
                    continue
                output.append(value)
        else: #this is the normal use case
            for item in data:
                for o in item.values():
                    value = func(o)
                    if not value: continue
                    output.append(value)
        return delimiter.join(output)

    def getChild(self, name, request):
        """overrode to get child resource if applicable"""
        r = self.children.get(name, self)
        if r is self: return self
        return r.getChild(name, request)

    @resource_error
    def render_GET(self, request):
        if 'values' in request.args.get('format', []):
            return self.value_serialize(self.OUTPUT_DATA, request)
        if 'pickle' in request.args.get('format', []):
            return self.pickle_serialize(self.OUTPUT_DATA)
        if 'yaml' in request.args.get('format', []):
            return self.yaml_serialize(self.OUTPUT_DATA)
        return self.json_serialize(self.OUTPUT_DATA)


class ConfigResource(_ConfigResource):
    """HTTP Resource /remote_config"""
    isLeaf = False
    OUTPUT_DATA = property(lambda s: {'RESOURCES': s.children.keys()})

    def __init__(self):
        _ConfigResource.__init__(self)
        self.putChild('environment', EnvironmentResource())
        self.putChild('server', ServerResource())


class EnvironmentResource(_ConfigResource):
    """HTTP Resource /remote_config/environment"""
    isLeaf = False
    OUTPUT_DATA = property(lambda s: {'ENVIRONMENTS': s.environments})

    def getChild(self, name, request):
        if name in self.environments:
            import romeo
            return RomeoResource(name, romeo.getEnvironment(name))
        return _ConfigResource.getChild(self, name, request)


class ServerResource(_ConfigResource):
    """HTTP Resource /remote_config/server"""
    isLeaf = False
    OUTPUT_DATA = property(lambda s: {'SERVERS': s.servers})

    def getChild(self, name, request):
        if name in self.servers:
            import romeo
            return RomeoResource(name, romeo.whoami(name))
        return _ConfigResource.getChild(self, name, request)


nodata = object()
class RomeoResource(_ConfigResource):
    """dynamically recurse romeo objects to the appropriate spot"""
    def __init__(self, name, entity):
        self.entity = entity
        #dynamically determine if this node is an endpoint
        self.isLeaf = not entity.COMPLEX_CONSTRUCTOR
        self.name = name
        #helps handle leaf nodes
        if self.isLeaf:
            self.data = entity
        else:
            self.data = nodata
        _ConfigResource.__init__(self)

    @resource_error
    def getChild(self, name, request):
        """overrode to route us on our way"""
        import romeo
        if not name: return self
        #allow servers to get back to their environment for global information
        if name.upper() == 'ENVIRONMENT' and self.entity.KEY == 'SERVER':
            env = None
            for i in self.entity.search('ENVIRONMENT'):
                if i.isChild(self.entity):
                    env = i
                    break
            if not env:
                raise romeo.EnvironmentalError('Serious issue for %s' % name.lower())
            return RomeoResource(name, env)
        key = [ i for i in self.entity.keys() if i.upper() == name.upper() ]
        if not key:
            raise romeo.EnvironmentalError('no such romeo key %s' % name.lower())
        key = key.pop()
        data = self.entity.get(key)
        if not self.isLeaf:
            self.data = data
        return self

    @property
    def OUTPUT_DATA(self):
        """format the entity data for display"""
        if self.data is nodata:
            self.data = self.entity
        if hasattr(self.data, '__iter__') and not isinstance(self.data, dict):
            self.data = [ make_dict(d) for d in self.data ]
        else:
            self.data = [ make_dict(self.data) ]
        return self.data


class Options(usage.Options, object):
    optFlags = [
        ["nonewline","n","Do not output the trailing newline."]
    ]
    args = property(lambda s: s._rls_args)
    path = property(lambda s: s._rls_path)
    tokens = property(lambda s: s.path.split(internal_seperator))
    def __init__(self):
        usage.Options.__init__(self)
        self._rls_path = internal_seperator
        self._rls_args = {}
        self._rls_datadir = None
        self._rls_values = False
        self.parseOptions()

    def opt_config(self, datadir=None):
        """Load romeo config from this location. [default: builtin]"""
        self._rls_datadir = datadir

    def opt_version(self):
        'Display version and exit.'
        util.println('rls %s' % (RLS_VERSION,))
        sys.exit(0)

    def opt_delimiter(self, delim):
        'Output will be seperated by this delimiter. [default: \\n]'
        self._rls_args.update({'delimiter': [delim]})

    def opt_yaml(self):
        'Output format in YAML.'
        self._rls_args.update({'format': ['yaml']})

    def opt_json(self):
        'Output format in Json.'
        self._rls_args.update({'format': ['json']})

    def opt_pickle(self):
        'Output format in Pickle.'
        self._rls_args.update({'format': ['pickle']})

    def opt_values(self):
        """Attempt to extract simple values from output. Use this option in 
         conjunction with the delimiter option."""
        self._rls_values = True

    def opt_debug(self):
        'Enable python stacktraces to stderr'
        global DEBUG
        DEBUG = True
        os.environ.pop('ROMEO_IGNORE_FQDN', None)

    def parseArgs(self, path=internal_seperator):
        """We extract the RLS path which should be the last argument."""
        if not path.startswith(internal_seperator):
            path = internal_seperator + path
        self._rls_path = path

    def postOptions(self):
        """we will apply the values option to the format at this stage."""
        #avoid circular references
        import romeo
        if self._rls_values:
            formatOpts = self._rls_args.get('format', []) + ['values']
            self._rls_args.update({'format': formatOpts})
        romeo.reload(datadir=self._rls_datadir)
        #we can't set this up util after romeo is loaded
        EnvironmentResource.environments = [ i.get('NAME').VALUE for i in romeo.listEnvironments() ]
        ServerResource.servers = [ i.VALUE for i in romeo.grammars.search('select HOSTNAME') ]

def debug(msg):
    sys.stderr.write(str(msg)+'\n') 

if __name__ == '__main__':
    try:
        request = Options()
        search = ConfigResource()
        if DEBUG:
            debug("Path: %s" % request.path) 
            debug("ARGS: %s\n" % str(request.args))
        for token in request.tokens:
            search = search.getChild(token,request)
        output = search.render_GET(request)
        if not request.get('nonewline'):
            util.println(output)
        else:
            sys.stdout.write(output)
            sys.stdout.flush()
    except usage.UsageError:
        util.println('%s: %s' % (sys.argv[0], failure.Failure().getErrorMessage()))
        util.println('%s: Try --help for usage details.' % (sys.argv[0]))
        sys.exit(1)
